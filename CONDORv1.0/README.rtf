{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww13600\viewh9420\viewkind0
\deftab720
\pard\pardeftab720\sa240\partightenfactor0

\f0\fs24 \cf2 \expnd0\expndtw0\kerning0
In this file, we explain how to use CONDOR. The codes were prepared in MATLAB R2020a. The main file is 
\f1\b CONDOR.m
\f0\b0  that allows one to run the code to load trajectories, preprocess them, classify them and infer their anomalous diffusion coefficient alpha. The codes for preprocessing, classification and inference are in the folders FeatureEngineering, Classification and Inference, respectively. Details about the method can be found at: https://arxiv.org/abs/2102.07605\
In the following, each code section of CONDOR.m is explained. For training and testing the neural networks for CONDOR, all the sections below need to be run. The ground truth values of the model and/or of the exponent alpha for each trajectory are also needed to train the networks. \
A MATLAB cell array 
\f1\b traj
\f0\b0  containing the trajectories is necessary to use the code (see traj3D_example.mat). If x, y and z are the coordinates of a trajectory: traj\{i\} = [x y z]. For example, for a 2D trajectory, traj\{i\} is a 2n vector, where the 1st n elements correspond to the x-coordinates of the trajectory and the next n elements correspond to the y coordinate.\
To obtain the prediction for the model without training the networks (using previously trained networks) run only sections 1, 2, 3, 5; for the prediction of alpha without training the networks, run sections 1, 2, 3, 5, 7. \

\f1\b 1. LOAD DATA
\f0\b0 \
This part asks to input the .mat file with the trajectories to load and their dimension (1,2 or 3) from command line. It also asks (y/n) whether training of the neural networks for CONDOR is needed and/or whether trained networks need to be used to predict the model and/or the alpha_exponent on data. \

\f1\b 2. CREATE STRUCT DATASET \

\f0\b0 A struct 
\f1\b Dataset
\f0\b0  with information about the trajectories is automatically created and saved. If the reference for the classification is provided (the ground truth for the models of the trajectories), these values are saved in a MATLAB array of numbers according to the following scheme: 1 = attm, 2 = ctrw, 3 = fbm, 4 = lw, 5 = sbm. Similarly, if available, the ground truth reference for alpha is saved in a MATLAB array of numerical values. \

\f1\b 3. FEATURE ENGINEERING\

\f0\b0 This part extracts features associated to the trajectories according to the analysis of their statistical properties and stores this information in 
\f1\b MomentaInputs
\f0\b0 . These features are the inputs for CONDOR\'92s neural networks in the following steps. \

\f1\b 4. TRAIN NETWORKS FOR CLASSIFICATION\
\pard\pardeftab720\partightenfactor0

\f0\b0 \cf2 The function TrainNetworkClass.m calls functions for training 3 steps of neural networks used for classification (see https://arxiv.org/abs/2102.07605). The following parameters used for training the networks can be controlled in CONDOR.m: the training function (trainFcn), the hidden layer size (hiddenLayerSize) and the data division for training (trainDataRatio), validation (valDataRatio) and test (testDataRatio).  At the end of the process, the trained networks are saved in the folder corresponding to the dimension (Networks_nD) contained in the folder Classification. 
\f1\b \

\f0\b0 \
\pard\pardeftab720\sa240\partightenfactor0

\f1\b \cf2 5. PREDICT THE MODEL\

\f0\b0 The function ModelPrediction.m returns the predicted model for each trajectory in the array
\f1\b  ModelGuess
\f0\b0 , using the network trained with the previous section of code. 
\f1\b \
6. TRAIN NETWORKS FOR INFERENCE \

\f0\b0 To train networks for the inference of alpha, ModelGuess is needed. TrainNetworkInf.m calls functions for training the neural networks used for inference according the two different methods (Models_method and SubNetworks_method corresponding to those used to predict alpha_1 e alpha_2 in https://arxiv.org/abs/2102.07605, respectively). The following parameters used for training the networks can be controlled in CONDOR.m: the training function (trainFcn), the hidden layer size (hiddenLayerSize) and the data division for training (trainDataRatio), validation (valDataRatio) and test (testDataRatio). At the end of the process, the trained networks are saved in the folder corresponding to the dimension (Networks_nD) contained in the folder Inference. 
\f1\b \
7. PREDICT ALPHA\

\f0\b0 The function AlphaPrediction.m returns the prediction for alpha for each trajectory in the array
\f1\b  AlphaGuess
\f0\b0 , using the networks trained with the previous section of code. \

\f1\b For a quick start
\f0\b0 : trained neural networks are provided (the training was performed as explained in https://arxiv.org/abs/2102.07605). A file for testing CONDOR prediction capabilities (traj1D_example.mat) is also provided and contains 1D trajectories with references for the exponent alpha (Alpha) and the model (Model).}